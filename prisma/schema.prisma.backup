generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum FundingStage {
  PRE_SEED
  SEED
  SERIES_A
  SERIES_B
  SERIES_C
  OTHER
}

enum KYCStatus {
  PENDING
  VERIFIED
  REJECTED
}

enum EntityType {
  STARTUP
  TOKEN
}

enum UserRole {
  INVESTOR
  FOUNDER
  ADMIN
}

enum FounderStatus {
  PENDING
  APPROVED
  REJECTED
}

// application pipeline

enum PaymentStatus {
  INITIATED
  SUCCEEDED
  FAILED
  CANCELLED
}

enum Chain {
  ETHEREUM
  POLYGON
  BASE
  ARBITRUM
  OTHER
}

enum DocumentType {
  PITCH_DECK
  SAFE
  SAFT
  KYC
  OTHER
}

model User {
  id             String               @id @default(uuid())
  name           String
  email          String
  emailVerified  Boolean              @default(false)
  role           UserRole             @default(INVESTOR) // potential issue
  founderStatus  FounderStatus? // null until they "Apply to be Founder"
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  sessions       Session[]
  accounts       Account[]
  kycRecord      KYCRecord?
  organizations  OrganizationMember[] // potential issue
  investments    Investment[]
  notifications  Notification[]
  startups       Startup[]            @relation("FounderStartups")
  tokens         Token[]              @relation("CreatorTokens")
  adminLogs      AdminActivityLog[]   @relation("AdminLogs") // potential issue
  paymentIntents PaymentIntent[]
  wallets        Wallet[]
  comments       Comment[]

  @@index([email])
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  token     String
  expiresAt DateTime
  ipAddress String
  userAgent String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Account {
  id                    String    @id @default(uuid())
  userId                String
  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  idToken               String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Verification {
  id         String   @id @default(uuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Organization {
  id          String   @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  members  OrganizationMember[]
  startups Startup[]
  tokens   Token[]
}

// potential issue

model OrganizationMember {
  id             String   @id @default(uuid())
  userId         String
  organizationId String
  role           UserRole @default(INVESTOR) // potential issue
  joinedAt       DateTime @default(now())

  user         User         @relation(fields: [userId], references: [id])
  organization Organization @relation(fields: [organizationId], references: [id])

  @@unique([userId, organizationId])
}

model Startup {
  id           String       @id @default(uuid())
  name         String
  description  String       @db.Text
  industry     String
  stage        FundingStage
  website      String?
  pitchDeck    String? // SUPABASE URL
  fundingGoal  Decimal      @db.Decimal(18, 2)
  amountRaised Decimal      @db.Decimal(18, 2)
  isApproved   Boolean      @default(false)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  founderId      String
  founder        User          @relation("FounderStartups", fields: [founderId], references: [id])
  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id])

  investments         Investment[]
  dueDiligenceReports DueDiligenceReport[]
  documents           Document[]
  comments            Comment[]

  @@index([industry])
  @@index([organizationId])
}

model Token {
  id            String   @id @default(uuid())
  name          String
  symbol        String   @unique
  description   String   @db.Text
  totalSupply   Decimal  @db.Decimal(38, 0)
  tokenomics    String   @db.Text
  whitepaperUrl String?
  fundingGoal   Decimal  @db.Decimal(18, 2)
  isApproved    Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  creatorId      String
  creator        User          @relation("CreatorTokens", fields: [creatorId], references: [id])
  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id])

  investments         Investment[]
  dueDiligenceReports DueDiligenceReport[]
  documents           EntityDocument[]
  comments            Comment[]
}

model Investment {
  id        String   @id @default(uuid())
  userId    String
  startupId String?
  tokenId   String?
  amount    Decimal  @db.Decimal(18, 2)
  ownership Decimal  @db.Decimal(10, 4) // Percentage
  createdAt DateTime @default(now())

  user    User              @relation(fields: [userId], references: [id])
  startup Startup?          @relation(fields: [startupId], references: [id])
  token   Token?            @relation(fields: [tokenId], references: [id])
  vesting VestingSchedule[]

  @@unique([userId, startupId])
  @@unique([userId, tokenId])
  @@index([userId])
  @@index([startupId])
  @@index([tokenId])
}

model VestingSchedule {
  id           String   @id @default(uuid())
  investmentId String
  cliffDate    DateTime
  unlockDate   DateTime
  percentage   Decimal  @db.Decimal(10, 4)
  createdAt    DateTime @default(now())

  investment Investment @relation(fields: [investmentId], references: [id])
}

model KYCRecord {
  id        String    @id @default(uuid())
  userId    String    @unique
  status    KYCStatus @default(PENDING)
  reason    String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model DueDiligenceReport {
  id         String     @id @default(uuid())
  entityType EntityType
  entityId   String
  summary    String     @db.Text
  riskScore  Int // 0-100
  sentiment  String?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  Startup    Startup?   @relation(fields: [startupId], references: [id])
  startupId  String?
  Token      Token?     @relation(fields: [tokenId], references: [id])
  tokenId    String?
}

model AdminActivityLog {
  id         String     @id @default(uuid())
  adminId    String
  action     String
  targetId   String
  targetType EntityType
  timestamp  DateTime   @default(now())

  admin User @relation("AdminLogs", fields: [adminId], references: [id])
}

model PaymentIntent {
  id         String        @id @default(uuid())
  userId     String
  provider   String // STRIPE, PAYPAL, etc.
  providerId String
  amount     Decimal       @db.Decimal(18, 2)
  currency   String        @default("USD")
  status     PaymentStatus @default(INITIATED)
  metadata   Json?
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Wallet {
  id        String   @id @default(uuid())
  userId    String
  address   String
  chain     Chain
  createdAt DateTime @default(now())

  user User       @relation(fields: [userId], references: [id])
  txs  CryptoTx[]

  @@unique([chain, address])
  @@index([userId])
}

model CryptoTx {
  id         String        @id @default(uuid())
  walletId   String
  entityType EntityType
  entityId   String
  txHash     String        @unique
  amount     Decimal       @db.Decimal(38, 18)
  status     PaymentStatus
  timestamp  DateTime      @default(now())

  wallet Wallet @relation(fields: [walletId], references: [id])

  @@index([entityType, entityId])
}

model Document {
  id         String       @id @default(uuid())
  url        String
  title      String
  type       DocumentType
  uploadedBy String?
  createdAt  DateTime     @default(now())

  entities  EntityDocument[]
  Startup   Startup?         @relation(fields: [startupId], references: [id])
  startupId String?
}

model EntityDocument {
  id         String     @id @default(uuid())
  entityType EntityType
  entityId   String
  documentId String
  visibility String     @default("PUBLIC") // PUBLIC, PRIVATE, ORGANIZATION
  createdAt  DateTime   @default(now())

  document Document @relation(fields: [documentId], references: [id])
  Token    Token?   @relation(fields: [tokenId], references: [id])
  tokenId  String?

  @@index([entityType, entityId])
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  type      String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@index([userId, read])
}

model Comment {
  id         String     @id @default(uuid())
  userId     String
  entityType EntityType
  entityId   String
  body       String     @db.Text
  parentId   String?
  createdAt  DateTime   @default(now())

  user      User     @relation(fields: [userId], references: [id])
  Startup   Startup? @relation(fields: [startupId], references: [id])
  startupId String?
  Token     Token?   @relation(fields: [tokenId], references: [id])
  tokenId   String?

  @@index([entityType, entityId])
}
